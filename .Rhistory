y <- pbeta(x, a, b)
mean_beta <- a/(a+b)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve")
y <- dbeta(x, a, b)
mean_beta <- a/(a+b)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve")
abline(v = mean_beta)
qbeta(.975,83,24) - qbeta(.025,83,24)
qbeta(.975,83,24)
qbeta(.025,83,24)
y2 <- dbeta(x, 83, 24)
lines(x, y2, col = "red")
abline(v = 83/(83+24), col='blue')
83/(83+24)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=c(0,10))
abline(v = mean_beta)
y2 <- dbeta(x, 83, 24)
lines(x, y2, col = "red")
abline(v = 83/(83+24), col='blue')
m <- 15
sd <- sqrt(2.5)
x <- seq(-10,10, length.out = 100)
y <- dnorm(x, m, sd)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=c(0,10))
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=c(0,1))
m <- 15
sd <- sqrt(2.5)
x <- seq(-1,1, length.out = 100)
y <- dnorm(x, m, sd)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=c(0,1))
m <- 15
sd <- sqrt(2.5)
x <- seq(-50,50, length.out = 100)
y <- dnorm(x, m, sd)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=c(0,1))
m <- 15
sd <- sqrt(2.5)
x <- seq(10,25, length.out = 100)
y <- dnorm(x, m, sd)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=c(0,1))
x <- seq(10,20, length.out = 100)
y <- dnorm(x, m, sd)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=c(0,1))
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve")
abline(v = m)
qbeta(.975,83,27)
qbeta(.025,83,27)
83/(83+27)
qnorm(.025,14.94,0.97)
qnorm(.975,14.94,0.97)
y2 <- dnorm(x, 14.94, .97)
lines(x, y2, col = "red")
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim(c(0,1)))
abline(v = m)
m <- 15
sd <- sqrt(2.5)
x <- seq(10,20, length.out = 100)
y <- dnorm(x, m, sd)
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim(c(0,1)))
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=(c(0,1)))
abline(v = m)
y2 <- dnorm(x, 14.94, .97)
lines(x, y2, col = "red")
plot(x, y, type = "l", xlab = "x", ylab = "Density", main = "Beta Curve", ylim=(c(0,.4)))
abline(v = m)
y2 <- dnorm(x, 14.94, .97)
lines(x, y2, col = "red")
abline(v = 83/(83+27), col='blue')
abline(v = 14.94, col='blue')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(splines)
snow = read_csv("snow_core.csv")
head(snow)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(splines)
data_wage = read_csv("wage_data.csv")
head(data_wage)
lm_prelim = lm(Density ~ Depth + Core ,data = snow)
lm_prelim
summary(lm_prelim)
AIC(lm_prelim)
lm_snow = lm(Density ~ Depth * Core ,data = snow)
summary(lm_snow)
snow$resid.linear = resid(lm_snow)
AIC(lm_snow)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Density,y = Depth)) + geom_point() +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
ggplot(site1, aes(x = resid.linear, y = Depth)) + geom_point() +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
ggplot(site1, aes(x = Depth, y = resid.linear)) + geom_point() +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
lm_poly = lm(Density ~ Core +  poly(Depth,4),data = snow)
AIC(lm_poly)
lm_poly_int = lm(Density ~ Core *  poly(Depth,4),data = snow)
AIC(lm_poly_int)
lm_poly_int = lm(Density ~ Core *  poly(Depth,3),data = snow)
lm_poly = lm(Density ~ Core +  poly(Depth,3),data = snow)
lm_spline_linear = lm(Density ~ Core +
bs(Depth,knots = quantile(Depth,c(10)), degree = 3),
data = snow)
lm_spline_linear = lm(Density ~ Core +
bs(Depth,knots = 10, degree = 3),
data = snow)
lm_spline_cub = lm(Density ~ Core +
bs(Depth,knots = 10, degree = 3),
data = snow)
AIC(lm_spline_cub)
lm_spline_cub_int = lm(Density ~ Core *
bs(Depth,knots = 10, degree = 3),
data = snow)
lm_spline_cub_int = lm(Density ~ Core *
bs(Depth,knots = 10, degree = 3),
data = snow)
snow$pred.spline = predict(lm_spline_cub_int)
snow$resid.spline = lm_spline_cub_int$residuals
AIC(lm_spline_cub_int)
lm_snow = lm(Density ~ Depth * Core ,data = snow)
snow$pred.linear = predict(lm_snow)
snow$resid.linear = resid(lm_snow)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.linear, group = Core, col = Core), size =1.5) +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.spline, group = Core, col = Core), size =1.5) +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
ggplot(site1, aes(x = Depth, y = resid.spline)) + geom_point() +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.spline, group = Core, col = Core), size =1.5) +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(splines)
snow = read_csv("snow_core.csv")
head(snow)
lm_prelim = lm(Density ~ Depth + Core ,data = snow)
summary(lm_prelim)
AIC(lm_prelim)
lm_snow = lm(Density ~ Depth * Core ,data = snow)
snow$pred.linear = predict(lm_snow)
snow$resid.linear = resid(lm_snow)
AIC(lm_snow)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.linear, group = Core, col = Core), size =1.5) +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
ggplot(site1, aes(x = Depth, y = resid.linear)) + geom_point() +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
lm_poly = lm(Density ~ Core +  poly(Depth,3),data = snow)
AIC(lm_poly)
lm_poly_int = lm(Density ~ Core *  poly(Depth,3),data = snow)
AIC(lm_poly_int)
lm_spline_cub = lm(Density ~ Core +
bs(Depth,knots = 10, degree = 3),
data = snow)
AIC(lm_spline_cub)
lm_spline_cub_int = lm(Density ~ Core *
bs(Depth,knots = 10, degree = 3),
data = snow)
snow$pred.spline = predict(lm_spline_cub_int)
snow$resid.spline = lm_spline_cub_int$residuals
AIC(lm_spline_cub_int)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.spline, group = Core, col = Core), size =1.5) +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.spline, group = Core, col = Core), size =1.5) +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
lm_spline_cub_int = lm(Density ~ Core *
bs(Depth,knots = 10, degree = 3),
data = snow)
snow$pred.spline = predict(lm_spline_cub_int)
snow$resid.spline = lm_spline_cub_int$residuals
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.spline, group = Core, col = Core), size =1.5) +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
site1 <- subset(snow, Core == 1)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.spline, group = Core, col = Core), size =1.5) +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
ggplot(site1, aes(x = Depth, y = resid.spline)) + geom_point() +
geom_smooth() +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.text.x = element_text(size = 12,angle = 270,hjust = 0,vjust = .5),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
geom_line(aes(x = Depth, y = pred.linear, group = Core, col = Core), size =1.5) +
theme_bw() +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
theme_bw() +
geom_line(aes(x = Depth, y = pred.linear, group = Core, col = Core), size =1.5) +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Depth, y = Density)) + geom_point() +
theme_bw() +
geom_line(aes(x = Depth, y = pred.linear, group = Core, col = Core), size =1.5) +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
site1 <- subset(snow, Core == 1)
ggplot(site1, aes(x = Depth, y = Density)) +
geom_point() +
theme_bw() +
geom_line(aes(x = Depth, y = pred.linear, group = Core, col = Core), size =1.5) +
theme(legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14)) +
theme(aspect.ratio = 1)
library(tidyverse)
library(corrplot)  # for the correlation matrix
library(bestglm)  # for variable selection
library(car)  # for VIFs
library(MASS)  # for negative binomial regression
library(pscl)  # for zero-inflated regression
library(gridExtra)
bikes <- read_csv("Bikes.csv") %>%
mutate_if(is.character, as.factor)
bikes$yr <- as.factor(bikes$yr)
summary(bikes)
ggplot(data = bikes) +
geom_histogram(mapping = aes(x = cnt, y = ..density..),
binwidth = 100) +
theme_bw() +
theme(aspect.ratio = 1)
bikes_model <- bestglm(as.data.frame(bikes),
IC = "BIC",
method = "exhaustive",
TopModels = 1,
family = poisson)
summary(bikes_model$BestModel)
bikes_poisson <- glm(cnt ~ season + yr + holiday +
workingday + weathersit + temp + hum + windspeed,
data = bikes,
family = poisson(link = "log"))
summary(bikes_poisson)
#Temperature
ggplot(data = bikes, mapping = aes(y = log(cnt + 1), x = temp)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1)
#Humidity
ggplot(data = bikes, mapping = aes(y = log(cnt + 1), x = hum)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1)
#Windspeed
ggplot(data = bikes, mapping = aes(y = log(cnt + 1), x = windspeed)) +
geom_point() +
theme_bw() +
theme(aspect.ratio = 1)
# Use added variable plots for any continuous predictors you included in the
# model
avPlots(bikes_poisson, terms = ~ temp + hum + windspeed)
bikes.cooks <- data.frame("cooks.distance" = cooks.distance(bikes_poisson))
bikes.cooks$obs <- 1:nrow(bikes)
ggplot(data = bikes.cooks) +
geom_point(mapping = aes(x = obs, y = abs(cooks.distance))) +
geom_hline(mapping = aes(yintercept = 4/ length(obs)),
color = "red", linetype = "dashed") +  # for n > 30
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1)
bikes$cooksd <- cooks.distance(bikes_poisson)
bikes %>%
mutate(rowNum = row.names(bikes)) %>%  # save original row numbers
filter(cooksd > 4 / length(cooksd)) %>%  # select potential outliers
arrange(desc(cooksd))
library(tidyverse)
library(ggfortify)  # plot lm objects using ggplot instead of base R
library(car)  # needed for added-variable plots and dfbetas
library(corrplot)  # colored correlation matrix
# install.packages("devtools")
# devtools::install_github("thomasp85/patchwork")
library(patchwork)
FatComplete <- read_table("BodyFat.txt")
bodyfat<- FatComplete %>%
select(-row)
summary(bodyfat)
pairs(bodyfat, pch = 19)
round(cor(bodyfat), 2)
corrplot(cor(bodyfat), type = "upper")
bodyfat_lm <- lm(brozek ~ ., data = bodyfat)
summary(bodyfat_lm)
bodyfat$residuals <- bodyfat_lm$residuals
bodyfat_resid_vs_fit <- autoplot(bodyfat_lm, which = 1, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
bodyfat_resid_vs_fit
plot4
## Loading Libraries
library(tidyverse)
library(vroom)
library(DataExplorer)
library(patchwork)
# Load data
bike <- vroom('./train.csv')
plot_histogram(bike) # histograms of all numerical variables
## Loading Libraries
library(tidyverse)
library(vroom)
library(DataExplorer)
library(patchwork)
plot_histogram(bike) # histograms of all numerical variables
# Load data
bike <- vroom('./train.csv')
setwd('~/College/Stat348/KaggleBikeShare')
# Load data
bike <- vroom('./train.csv')
plot_histogram(bike) # histograms of all numerical variables
library(tidymodels)
install.packages('tidymodels')
## Loading Libraries
library(tidyverse)
library(vroom)
library(tidymodels)
# Load data
bike <- vroom('./train.csv')
skimr::skim(bike)
# Clean data
bike$weather
# Clean data
bike$wetaher[bike$weather = 4]
# Clean data
bike$wetaher[bike$weather == 4]
# Clean data
bike$weather[bike$weather == 4]
# Clean data
bike %>%
select(weather)
# Clean data
bike %>%
filter(weather == 4)
# Clean data
bike_cleaned <- bike %>%
mutate(weather = ifelse(weather == 4, 3, weather)) # where weather is 4 change to 3 (only one value like that)
# Clean data
bike_cleaned <- bike %>%
mutate(weather = ifelse(weather == 4, 3, weather)) %>% # where weather is 4 change to 3 (only one value like that)
select(everything(),-registered, -casual)
dplyr::glimpse(bike) # lists the variable type of each column
# Clean data
bike_cleaned <- bike %>%
mutate(weather = ifelse(weather == 4, 3, weather))# where weather is 4 change to 3 (only one value like that)
plot_correlation(bike)
library(DataExplorer)
library(patchwork)
plot_correlation(bike)
skimr::skim(bike)
# Feauter Engineering
my_recipe <- recipe(count~., data=bike_cleaned) %>% # Set model formula and data
step_date(datetime, features="dow") %>% # gets day of week
step_time(datetime, features="hour") %>% # gets hour
step_zv(all_predictors()) %>% #removes zero-variance predictors
step_corr(variables, threshold=0.8) %>% # removes > than .8 corr
step_select(everything(),-registered, -casual) #selects columns
prepped_recipe <- prep(my_recipe) # Sets up the preprocessing using myData
rlang::last_trace()
prepped_recipe <- prep(my_recipe) # Sets up the preprocessing using myData
# Feauter Engineering
my_recipe <- recipe(count~., data=bike_cleaned) %>% # Set model formula and data
step_date(datetime, features="dow") %>% # gets day of week
step_time(datetime, features="hour") %>% # gets hour
step_zv(all_predictors()) %>% #removes zero-variance predictors
step_corr(variables, threshold=0.8) %>% # removes > than .8 corr
step_select(everything(), -'registered', -'casual') #selects columns
prepped_recipe <- prep(my_recipe) # Sets up the preprocessing using myData
# Feauter Engineering
my_recipe <- recipe(count~., data=bike_cleaned) %>% # Set model formula and data
step_date(datetime, features="dow") %>% # gets day of week
step_time(datetime, features="hour") %>% # gets hour
step_zv(all_predictors()) %>% #removes zero-variance predictors
step_corr(all_predictors(), threshold=0.8) %>% # removes > than .8 corr
step_select(everything(), -'registered', -'casual') #selects columns
prepped_recipe <- prep(my_recipe) # Sets up the preprocessing using myData
# Feauter Engineering
my_recipe <- recipe(count~., data=bike_cleaned) %>% # Set model formula and data
step_date(datetime, features="dow") %>% # gets day of week
step_time(datetime, features="hour") %>% # gets hour
step_zv(all_predictors()) %>% #removes zero-variance predictors
#step_corr(all_predictors(), threshold=0.8) %>% # removes > than .8 corr
step_select(everything(), -'registered', -'casual') #selects columns
prepped_recipe <- prep(my_recipe) # Sets up the preprocessing using myData
bake(prepped_recipe, new_data=bike)
# Feauter Engineering
my_recipe <- recipe(count~., data=bike_cleaned) %>% # Set model formula and data
step_date(datetime, features="dow") %>% # gets day of week
step_time(datetime, features="hour") %>% # gets hour
step_dummy(all_nominal_predictors()) %>% #create dummy variables
step_select(everything(), -'registered', -'casual') #selects columns
prepped_recipe <- prep(my_recipe) # Sets up the preprocessing using myData
bike_test <- vroom('./test.csv')
bake(prepped_recipe, new_data=bike)
prepped_recipe <- prep(my_recipe) # Sets up the preprocessing using myData
bake(prepped_recipe, new_data=bike)
